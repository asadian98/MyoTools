%% Data extraction and motor unit sorting pipeline, CorneilLab, Western University
% Created by Amirhossein Asadian
% Last Modified: Mar 6, 2025

% Notes:
% This is a pipeline script for extracting data from MonkeyLogic and OpenEphys,
% as well as sorting motor units using EMUsort.

% **** Raw emg data files should be in this directory:
% Desktop --> Mayo_Data --> Raw_Data --> sesName --> {animalName} -->
% {sesName (openephys folder)}
% **** MonkeyLogic files should be in this directory:
% Desktop --> Mayo_Data --> ML_Behavioural_Files --> {animalName} --> {sesName}_{exp_num}_{rec_num}.bhv2

% **** Output files will be in this directory:
% Desktop --> {Researcher} --> {animalName} --> {sesName} --> (outputfiles)

% outputfiles:
%             Z_{session name}_Analog.mat
%                                           Z_Analog:
%                                                       data (raw data for eye_x, eye_y, eye_pupil, photodiode) --> dimension is 4*numsamples
%                                                       info
%                                                       PD_sec (photodiode onset times relative to the beginning of the session) --> numtrials*numPDs
%
%             Z_{session name}_Digital.mat
%                                           Z_Digital:
%                                                       data (statecodes; statecodetimes) --> dimension is 2*numstatecodes
%                                                       info
%
%             Z_{session name}_ML.mat
%                                           Z_ML (MonkeyLogic data including calibrated eye, touch, ... )
%
%
%             Z_{session name}_{region name}_Spikes.mat
%                                           Z_Spikes
%                                                       data: spikes and times of spikes for each channel (the contact on which units sit comes from Kilosort)
%                                                       info
%                                                       su: information for each unit (note that clusterId starts from zero, the peakCh might be different than the channel number in data)
%
%             Z_{session name}_{region name}_TR.mat
%                                           Z_TR
%                                                       data: DLC tracking data for each frame
%                                                       frames_timestamps: frame timestamps
%                                                       ledvalue: pixel brightness related to photodiode on each frame
% You can also have Z_Wave/Z_Raw (larger files.)

clc; clear;

folder_path = 'C:\Users\CorneilLab\Desktop\MyoTools';
addpath(genpath(folder_path));

folder_path = 'C:\Users\CorneilLab\Desktop\SortingTools';
addpath(genpath(folder_path));

folder_path = 'C:\Users\CorneilLab\Desktop\SharedUtils';
addpath(genpath(folder_path));

folder_path = 'C:\Users\CorneilLab\Documents\NIMH_MonkeyLogic_2.2';
addpath(genpath(folder_path));

Folders.EMUsort = 'C:\Users\CorneilLab\Desktop\MyoTools\EMUsort';

sesName =                   '2025-03-26_14-30-06';
animalName =                'Trex';
muscle_name =               'neck';
ch_num =                    16;
getMLdata_flag =            1;
extractEMG_flag =           1;
getEvents_flag =            1;
plotRawData_flag =          1;
saveRawData_flag =          1;
runSorting_flag =           1;
runPhy_flag =               1;
saveMUs_flag =              0;
saveWave_flag =             0;
plotResults_flag =          0;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%    Extract MonkeyLogic Data   %%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% Define path to the recording
Folders.rec_path = ['C:\Users\CorneilLab\Desktop\Myo_Data\Raw_data\', animalName,'\', sesName, '\'];

if(getMLdata_flag)
    matches = regexp(sesName, '(\d{4})-(\d{2})-(\d{2})', 'tokens');
    year_last2 = matches{1}{1}(3:4); % Extract '25' from '2025'
    result = [year_last2 matches{1}{2} matches{1}{3}]; % Concatenates '25', '03', '06'
    cd(Folders.rec_path)
    Z = ExtractML_Myo([result, '_', animalName, '_Myo_2.bhv2']);
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%      Extract OpenEphys Data     %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if(extractEMG_flag)

    % Create a session (loads all data from the most recent recording)
    session = Session(Folders.rec_path);
    
    % Get the number of record nodes for this session (we have one recording
    % node)
    nRecordNodes = length(session.recordNodes);
    RecordNodes = [2]; % You can extract more than one recording file
    rec_EMG_1k = {};
    rec_EMG = {};
    rec_Analog = {};
    rec_events = {};
    sampling_rate = 30000;
    
    % Iterate over the record nodes to access data
    for i = 1:nRecordNodes
    
        node = session.recordNodes{i};
    
        for j = RecordNodes
            disp(['Extracting data from Node ', num2str(j)])
            % 1. Get the first recording
            recording = node.recordings{1,j};
    
            % 2. Iterate over all continuous data streams in the recording
            streamNames = recording.continuous.keys();
    
            for k = 1:length(streamNames)
    
                streamName = streamNames{k};
                disp(streamName)
    
                filter_limits=[300 7000];
    
                % Get the continuous data from the current stream
                continuousdata = recording.continuous(streamName);
                rec_EMG_1k{find(RecordNodes == j)}.data = downsample(bandpass(double(continuousdata.samples(1:ch_num, :))', filter_limits, sampling_rate), sampling_rate/1000)';
                rec_EMG_1k{find(RecordNodes == j)}.timestamps = downsample(continuousdata.timestamps, 30000/1000)';
                rec_EMG{find(RecordNodes == j)}.data = continuousdata.samples(1:ch_num, :);
                rec_EMG{find(RecordNodes == j)}.timestamps = continuousdata.timestamps';
                rec_Analog{find(RecordNodes == j)}.data = downsample(continuousdata.samples(ch_num+1:ch_num+4, :)', 30000/1000)';
                rec_Analog{find(RecordNodes == j)}.timestamps = downsample(continuousdata.timestamps, 30000/1000)';
    
                if(getEvents_flag)
                    % 3. Get all available event data
                    eventProcessors = recording.ttlEvents.keys();
                    processor = eventProcessors{1};
                    events = recording.ttlEvents(processor);
    
                    % Just get valid events:
                    events_without_eye = events.line(find(events.line ~= 8 & events.line ~= -8 & events.line ~= -7));
                    timestamp_without_eye = events.timestamp(find(events.line ~= 8 & events.line ~= -8 & events.line ~= -7));
                    [rec_events{find(RecordNodes == j)}(1, :), rec_events{find(RecordNodes == j)}(2, :)] = getEvents_from_train_with_strobe(events_without_eye, timestamp_without_eye);
                end
            end
    
            % 5. Print any message events
            if recording.messages.Count > 0
                disp("Found Message Center events!");
                % recording.messages('MessageCenter');
            end
    
        end
    end
    
    if(getMLdata_flag && length(find(rec_events{1, 1} (1, :) == 9)) == length(Z.TrialError))
        error('ML and ')
    end

    cd(Folders.rec_path)

    signal.fsamp = 30000;
    signal.nChan = 16;
    signal.ngrid = 1;
    signal.muscle = cell(1);
    signal.muscle{1} = 'neck';
    signal.gridname{1} = 'MYOMNP-1x16';
    signal.data = double(rec_EMG{1, 1}.data(1:16, :));

    save('signal', 'signal', '-v7.3')
end

if(plotRawData_flag)

    for j = RecordNodes
        % Keep in mind that the recording starts after hitting play so the
        % timestamps doesn't start from zero
        figure;
        hold on;
        offset = 0; % Initial vertical offset
        vertical_shift = -1.1; % Amount to shift each plot vertically
        plottime = 100;
        for kk = 1:ch_num

            data = double(rec_EMG_1k{find(RecordNodes == j)}.data(kk, 1:plottime*1000)); % Use the first channel of data

            % Plot with vertical shift
            plot(rec_EMG_1k{find(RecordNodes == j)}.timestamps(1:plottime*1000), normalize(data - mean(data),'range', [0, 1])+offset, 'LineWidth', 1.5);

            % Add label for each data stream
            text(rec_EMG_1k{find(RecordNodes == j)}.timestamps(1), offset, ['ADC', num2str(kk)], 'VerticalAlignment', 'bottom', 'FontSize', 8);

            % Update the offset for the next stream
            offset = offset + vertical_shift;
        end
        
        for kk = 1:4 % Plot analog data

            data = double(rec_Analog{find(RecordNodes == j)}.data(kk, 1:plottime*1000)); % Use the first channel of data

            % Plot with vertical shift
            plot(rec_Analog{find(RecordNodes == j)}.timestamps(1:plottime*1000), normalize(data - mean(data),'range', [0, 1])+offset, 'LineWidth', 1.5);

            % Add label for each data stream
            text(rec_Analog{find(RecordNodes == j)}.timestamps(1), offset, ['Analog', num2str(kk)], 'VerticalAlignment', 'bottom', 'FontSize', 8);

            % Update the offset for the next stream
            offset = offset + vertical_shift;

        end
        xlabel('Time(sec)')

    end

    if getEvents_flag
        if ~isempty(events)
            for n = 1:size(rec_events{find(RecordNodes == j)}, 2)
%                 rec_events{j}(2, n)
                if(rec_events{find(RecordNodes == j)}(2, n) < rec_EMG{find(RecordNodes == j)}.timestamps(1)+plottime(end)/30000)
                    line([rec_events{find(RecordNodes == j)}(2, n), rec_events{find(RecordNodes == j)}(2, n)], [4.5,5.5], 'Color', 'red', 'LineWidth', 0.2);
                end
            end
        end
    end
end

if(saveRawData_flag)

    save(['rec_Analog_', num2str(RecordNodes(1))], 'rec_Analog','-v7.3')
    save(['rec_EMG_', num2str(RecordNodes(1))], 'rec_EMG','-v7.3')
    save(['rec_EMG_1k_', num2str(RecordNodes(1))], 'rec_EMG_1k','-v7.3')
    if(getEvents_flag) 
        save(['rec_events_', num2str(RecordNodes(1))], 'rec_events','-v7.3'); 
    end
    if(getMLdata_flag)
        save(['rec_Z_', num2str(RecordNodes(1))], 'Z','-v7.3')
    end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%     Run EMUsort     %%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if(runSorting_flag)

%     cd(Folders.EMUsort)
%     anaconda_path = 'C:\ProgramData\anaconda3';
%     setenv('PATH', [anaconda_path ';' anaconda_path '\Scripts;' anaconda_path '\Library\bin;' getenv('PATH')]);
%     command = strcat("activate emusort && python emusort.py --folder ", rec_path, "\ ");
%     [status, cmdout] = system(command, "-echo");
%     command = strcat("activate emusort && python emusort.py --folder ", rec_path, " --sort");
%     [status, cmdout] = system(command, "-echo");
% 
%     cd(Folders.EMUsort)

%     micromambaPath = 'C:/micromamba';
%     environmentName = 'myenv';
%     gitBashPath = 'C:/Program Files/Git/bin/bash.exe';
%     matlabCommands = 'python my_script.py'; % Replace with your desired commands
%     
%     command = sprintf('"%s" -c "source %s/bin/activate %s && %s"', ...
%         gitBashPath, micromambaPath, environmentName, matlabCommands);
%     
%     [status, result] = system(command);

% Assuming rec_path holds the path to your session folder (e.g., 'D:\MyData\Session1')

% 1. Construct the path to git-bash.exe
git_bash_path = 'C:\Program Files\Git\git-bash.exe';

% 2. Construct the commands to run in git-bash.
%   - Use forward slashes for paths in git-bash.
%   - Escape spaces in paths with backslashes.
%   - Convert Windows paths to Git Bash compatible paths.

%     % Convert rec_path to git-bash compatible path.
%     rec_path_bash = strrep(Folders.rec_path, '\', '/'); % Replace backslashes with forward slashes
%     rec_path_bash = strrep(rec_path_bash, ' ', '\ '); % Escape spaces
%     
%     % Construct the first command.
%     command1 = sprintf('"%s" --login -i -c "micromamba activate emusort"', git_bash_path);
%     command2 = sprintf('"%s" --login -i -c "emusort --folder %s"', git_bash_path, rec_path_bash);
% 
%     % Construct the second command.
%     command3 = sprintf('"%s" --login -i -c "emusort --folder %s --sort"', git_bash_path, rec_path_bash);
%     
%     % 3. Execute the commands using system().
%     [status1, cmdout1] = system(command1, '-echo');
%     [status2, cmdout2] = system(command2, '-echo');
%     [status3, cmdout3] = system(command3, '-echo');
%     
%     % 4. (Optional) Check the status and output.
%     if status1 == 0
%         disp('First command executed successfully.');
%         disp(cmdout1);
%     else
%         disp('First command failed.');
%         disp(cmdout1);
%     end
%     
%     if status2 == 0
%         disp('Second command executed successfully.');
%         disp(cmdout2);
%     else
%         disp('Second command failed.');
%         disp(cmdout2);
%     end


% rec_path = strrep(rec_path, '\', '\\');


    % Path to Git Bash executable
    gitbash_path = '"C:\Program Files\Git\git-bash.exe"';
    
    % Define the path with double backslashes for Windows
    % rec_path = 'C:\\Users\\CorneilLab\\Desktop\\Mayo_Data\\Raw_data\\Trex\\2025-03-11_12-51-59\\';
    
    % First command: activate environment and run emusort with the folder path
    command = strcat(gitbash_path, " -c 'micromamba activate emusort && emusort --folder \'", strrep(Folders.rec_path, '\', '\\'), "\'");
    
    % Execute the command
    [status, cmdout] = system(command, "-echo");

    % Second command: sort data
    command = strcat(gitbash_path, " -c 'micromamba activate emusort && emusort --folder \'", strrep(Folders.rec_path, '\', '\\'), "\' --sort");
    [status, cmdout] = system(command, "-echo");

end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%            PHY            %%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if(runPhy_flag)

    cd(Folders.rec_path)
    % List all folders in the current directory
    folders = dir('sorted_*');

    % Check if any matching folder exists
    if ~isempty(folders)
        % Change to the first matching folder
        cd(folders(1).name);
    else
        disp('First, you need to sort your data.');
    end

    anaconda_path = 'C:\ProgramData\anaconda3';
    setenv('PATH', [anaconda_path ';' anaconda_path '\Scripts;' anaconda_path '\Library\bin;' getenv('PATH')]);
    command = strcat("activate phy2 && phy template-gui  ", [Folders.rec_path, folders(1).name], "\params.py");
    [status, cmdout] = system(command, "-echo")

end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  Get and Save MUs from PHY  %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if(saveMUs_flag)
        
    meta.sesName = sesName;
    meta.region = muscle_name;
    meta.fileName = 'recording';
    meta.nCh = ch_num;
    meta.fs = 30000;
    
    cd(Folders.rec_path)
    % List all folders in the current directory
    folders = dir('sorted_*');
    
    % Check if any matching folder exists
    if ~isempty(folders)
        % Change to the first matching folder
        cd(folders(1).name);
    else
        disp('First, you need to sort your data.');
    end
    
    Folders.sortingFolder = [Folders.rec_path, folders(1).name];
    Folders.save_dir = [Folders.rec_path, folders(1).name];

    cd(Folders.sortingFolder)

    info = [];
    save('convertInfo.mat', 'info')

    saveSpikes(Folders, meta, [], saveWave_flag);
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%           Plot MUs          %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if(plotResults_flag)

    cd(Folders.save_dir)
    load(['Z_', sesName,'_', muscle_name, '_Spikes'])
    load(['Z_', sesName,'_', muscle_name, '_Wave'])
    load([sesName,'_PHY_', muscle_name])

    waveform_cells = Z_Wave.data;
    % Assuming your cell array is called 'waveform_cells'
    goodUnits = find([Z_Spikes.su(:).clusterScore] == 2);

    % Create a figure for plotting
    figure;
    for unit_index = goodUnits

        % Define vertical shift between channels
        vertical_shift = -0.5 * max(waveform_cells{unit_index}(:)); % Max across all units

        waveforms = waveform_cells{unit_index}; % Extract 3D matrix for the current unit
        avg_waveforms = squeeze(mean(waveforms, 1)); % Average waveform per channel

        [num_waveforms, num_channels, timeline_length] = size(waveform_cells{unit_index}); % Assuming all units have the same size

        % Create subplot for the current unit
        subplot(1, length(goodUnits), find(goodUnits == unit_index));
        hold on;

        % I need to find the channel number based on what PHY says not the
        % median channel as sp/su gives you
        units_ch = cluster_channel(find(clusterScore ~= 0));

        % Plot each channel with vertical shift
        for ch = 1:num_channels
            %             for wf = 1:num_waveforms
            %                 plot(1:timeline_length, squeeze(waveforms(wf, ch, :)) + (ch - 1) * vertical_shift, 'k');
            %             end
            %             Plot the average waveform for the current channel

            wfLength = numel(avg_waveforms(ch, :));
            x = linspace(-2, 2, wfLength);
            if(ch ~= units_ch(unit_index))
                plot(x, avg_waveforms(ch, :) + (ch - 1) * vertical_shift, 'r', 'LineWidth', 2);
            else
                plot(x, avg_waveforms(ch, :) + (ch - 1) * vertical_shift, 'g', 'LineWidth', 2);
            end
            text(1,  avg_waveforms(ch, 1) + (ch - 1) * vertical_shift, num2str(ch))
        end

        title(['Unit ', num2str(unit_index), '  ', num2str(units_ch(unit_index))]);
        xlabel('Time');
        hold off;
    end

    % Add a super title for the entire figure
    sgtitle('Waveforms and Averages for All Units');
end


%% functions for decoding digital values

function [decoded_values, decoded_timestamps] = getEvents_from_train(train, timestamps)

% Initialize the binary state for 6 digits (all start from 0)
state = zeros(1, 6);

% Initialize output storage
decoded_values = [];
decoded_timestamps = [];

% Group events by unique timestamps
[unique_timestamps, ~, group_indices] = unique(timestamps);

% Process each group of events at the same timestamp
for i = 1:length(unique_timestamps)
    % Find the indices of the events that occurred at this timestamp
    group_indices_at_time = find(group_indices == i);

    % Toggle the states of all digits in this group
    for idx = group_indices_at_time
        digit_index = train(idx);
        state(digit_index) = ~state(digit_index); % Flip 0 to 1 or 1 to 0
    end

    % Calculate the decimal value from the binary state
    decimal_value = sum(state .* 2.^(0:5)); % 6 digits, most significant bit is on the left

    % Store the decoded value and the timestamp
    decoded_values = [decoded_values, decimal_value];
    decoded_timestamps = [decoded_timestamps, unique_timestamps(i)];
end

end

function [decoded_values, decoded_timestamps] = getEvents_from_train_with_strobe(train, timestamps)

% Initialize the binary state for 6 digits and strobe (7th digit)
state = zeros(1, 7);

% Unique timestamps and their indices
[unique_timestamps, ~, idx] = unique(timestamps);

% Initialize output storage
decoded_values = [];
decoded_timestamps = [];

% Process each unique timestamp
for t = 1:length(unique_timestamps)
    % Get the indices of the train for this timestamp
    current_indices = find(idx == t);

    % Update the state for all digits at this timestamp
    for i = current_indices
        digit_index = abs(train(i)); % Get the absolute digit index
        state(digit_index) = train(i) > 0; % Set to 1 if positive, 0 if negative
    end

    % Check if strobe (digit 7) is up (1)
    if state(7) == 1
        % Calculate the decimal value of digits 1 to 6
        decimal_value = sum(state(1:6) .* 2.^(0:5)); % 6 digits, MSB is on the left

        % Store the timestamp of the strobe being up and the decoded value
        decoded_values = [decoded_values, decimal_value];
        decoded_timestamps = [decoded_timestamps, unique_timestamps(t)];
    end
end

% Because I'm using the strobe code, "decoded values" gives me two values (one when
% the digits turn up and one when the strobe bit goes high)
if(decoded_values(1) == decoded_values(2))
    decoded_values = [decoded_values(1), decoded_values(2:2:end)];
    decoded_timestamps = [decoded_timestamps(1), decoded_timestamps(2:2:end)];
else
    decoded_values = decoded_values(1:2:end);
    decoded_timestamps = decoded_timestamps(1:2:end);
end

end

